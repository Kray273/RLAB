# op ->
# Warning message:
#   In matrix(c(1:11), nrow = 2) :
#   data length [11] is not a sub-multiple or multiple of the number of rows [2]
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T)
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:10), nrow = 2, byrow = T)
m
m <- matrix(c(1:10),  byrow = T)
m
m <- matrix(c(1:10),  ncol = 10)
m
# 행 묶음으로 행렬 객체 생성
x1 <- c(5,40,50:52)
x2 <- c(30, 5, 6:8)
mr <- rbind(x1,x2)
mr
# 열 묶음으로 행렬 객체 생성
mc <- cbind(x1,x2)
mc
# 2행으로 행렬 객체 생성
m3 <- matrix(c(10:19),nrow = 2)
m3
# 자료와 객체 type 보기
mode(m3); class(m3) # numeric, matrix
# 행렬 객체에 첨자로 접근
# java의 경우 int[][] num = new int[2][5];로 설정하고
# num[1][2] = 15;로 값을 넣음.
m3[2,3]
# op -> [1] 15
m3[1,]
# op -> [1] 10 12 14 16 18
m3[,5]
# op -> [1] 18 19
m3[1,c(2:5)] # 1행에서 2~5열 데이터
# op -> [1] 18 19
m3[1,c(2:4)] # 1행에서 2~4열 데이터
# op -> [1] 12 14 16
m3[1,c(2,4)] # 1행에서 2,4열 데이터
# 3차원 배열 객체 자료 조회
x <- matrix(c(1:9),nrow = 3, ncol = 3)
x
x <- matrix(c(1:9),nr = 3, nc = 3)
x
# 자료의 개수 보기
length(x) # 데이터 개수
ncol(x); nrow(x) # 열 / 행 수
# apply() 함수 적용
apply(x, 1, max) #두번쨰 매개변수는 1은 행, 2은 열을 의미
# apply() 함수 적용
apply(x, 1, max) #두번쨰 매개변수는 1은 행, 2은 열을 의미
# op -> [1] 7 8 9
apply(x, 1, min)
# op -> [1] 1 2 3
apply(x, 2, mean) # 열 단위의 평균값값
x <- matrix(c(1:9),nr = 3, nc = 3) #매개변수이름은 구별이 가는 선에서 요약가능
x
<-  function(x){ # x : 매개변수
f <-  function(x){ # x : 매개변수
x * c(1,2,3)
}
View(f)
# 행 우선 순서로 사용자 정의 함수 적용
apply(x,1,f)
# 행 우선 순서로 사용자 정의 함수 적용
resu <- apply(x,1,f)
# 행 우선 순서로 사용자 정의 함수 적용
result <- apply(x,1,f)
result
# 열 우선 순서로 사용자 정의 함수 적용
result <- apply(x,2,f)
result
# 행렬 객체에 컬럼명 지정하기
colnames(x) <-  c('one','two','three')
x
# 3차원 배열 객체 생성하기
vec <- c(1:12) # 12개 벡터 객체 생성
arr <- array(vec,c(3,2,2)) #3행 2열 2면을 생성
arr
# 3차원 배열 객체 자료 조회
arr[2,1,2] # 행,열,면  8을 조회
# op- > [1] 8
arr[,,1] #1면 전채채
# op- >
#       [,1] [,2]
# [1,]    1    4
# [2,]    2    5
# [3,]    3    6
arr[2,,1] # 1면의 2행
# 배열 자료형과 자료 구조
mode(arr); class(arr)
# 데이터 셋 가져오기
library(RSADBE)
data(Bug_Metrics_Software)
str(Bug_Metrics_Software)
# 데이터 셋 자료보기
Bug_Metrics_Software
member <- list(name=c("헝길동","항길동"),
age=c(35,23),
address=c("서울","경기"),
gender=c("여자","남자"),
htype=c("아파트","오피스텔")
)
member
# key를 이용하여 value에 접근하기
member$name
#  op ->  [1] "헝길동" "항길동"
member$name[1]
#  op ->  [1] "헝길동"
member$name[3] <- "이순신" #데이터 추가 기능.
member$name[3]
member$age <- 45 #데이터 수정 시(주의  - 하나의 값으로 수정 X)
member$age
member
member$id <-c("hong","you") #데이터 추가
member
member$age <- nulll #데이터 제거
member$age <- null #데이터 제거
member$age <- NULL #데이터 제거
member
# 1개 값을 갖는 리스트 객체 생성
list <- list("lee","이순신",35)
list
# 1개 이상의 값을 갖는 리스트 객체 생성
num <-list(c(1:5),c(6:10))
num
# 리스트 자료구조 -> 벡터 구조로 변경하기
unlist <- unlist(num)
unlist
unlist
""" op
[1]  1  2  3  4  5  6  7  8  9 10
# 리스트 객체에 함수 적용하기
# list data 처리 함수
a <- list(c(1:5))
b <- list(c(6:10))
a; b
# 리스트 객체에 함수 적용하기
# list data 처리 함수
a <- list(c(1:5))
# 리스트 객체에 함수 적용하기
# list data 처리 함수
a <- list(c(1:5))
# 리스트 객체에 함수 적용하기
# list data 처리 함수
a <- list(c(1:5))
# 리스트 객체에 함수 적용하기
# list data 처리 함수
a <- list(c(1:5))
# 리스트 객체에 함수 적용하기
# list data 처리 함수
a <- list(c(1:5))
c(a,b)
b <- list(c(6:10))
c(a,b)
c(a,b)
a; b
c(a,b) # 하나의 데이터로 출력력
c <- lapply(c(a,b), max) # list로 결과반환
c
mode(c); class(c)  # "list" "list"
# 리스트 형식을 벡터 형식으로 반환하기
c <- sapply(c(a,b), max)
c
# op -> [1]  5 10
mode(c); class(c) # "numeric" "integer"
# 다차원 리스트 객체 생성
multi_list <- list(list(1,2,3),list(10,20,30),list(100,200,300))
multi_list
#
# [[3]]
# [[3]][[1]]
# [1] 100
#
# [[3]][[2]]
# [1] 200
#
# [[3]][[3]]
# [1] 300
multi_list <- list(c1=list(1,2,3),c2=list(10,20,30),c3=list(100,200,300))
multi_list
multi_list$c1
multi_list$c2
multi_list$c3
# op
# [[1]]
# [1] 100
#
# [[2]]
# [1] 200
#
# [[3]]
# [1] 300
mode(multi_list); class(multi_list)
# 다차원 리스트를 열 단위로 바인딩
d <- do.call(cbind, multi_list)
d
class(d) # "matrix"
# 벡터 이용 객체 생성
no  <- c(1, 2, 3)
name <- c("홍길동","이순신","강감찬")
pay <- c(150,250,300)
vemp <- data.frame(No=no,Name=name,Pay=pay)
vemp
# op
#    No   Name Pay
# 1  1 홍길동 150
# 2  2 이순신 250
# 3  3 강감찬 300
class(vemp) # "data.frame"
# 벡터 이용 객체 생성
no  <- c(1, 2, 3)
name <- c("홍길동","이순신","강감찬")
pay <- c(150,250,300)
vemp <- data.frame(No=no,Name=name,Pay=pay)
vemp
# matrix 이용 객체 생성
args(matrix)
m <- matrix(c(1,"홍길동",150,
2,"이순신",250,
3,"강감찬",300), 3, byrow = T)
m
class(m)
memp <- data.frame(m)
memp
gc()
m <- matrix(c(1,"홍길동",150,
2,"이순신",250,
3,"강감찬",300), 3, byrow = T)
memp <- data.frame(m)
memp
#op 데이터 프레임의 형변환이 가능.
#    X1     X2  X3
# 1  1 홍길동 150
# 2  2 이순신 250
# 3  3 강감찬 300
class(memp)
# txt 파일 이용 객체 생성
getwd()
# csv 파일 이용 객체 생성(header=T)
csvtemp <- read.csv('emp.csv', header = T)
csvtemp; class(csvtemp)
# csv 파일 이용 객체 생성(header=T)
csvtemp <- read.csv('emp.csv', header = T)
csvtemp; class(csvtemp)
# csv 파일 이용 객체 생성(header=T)
csvtemp <- read.csv('emp.csv', header = T)
csvtemp; class(csvtemp)
# csv 파일 이용 객체 생성(header=F)
name <- c("사번", "이름", "급여")
csvtemp2 <- read.csv('emp2.csv',header = F, col.names = name)
csvtemp2
# 데이터프레임 만들기
df <- data.frame(x=c(1:5), y=seq(2,10,2), z=c('a','b','c','d','e'))
df
# 데이터프레임 컬럼명 참조
df$x
# 자료구조, 열수, 행수, 컬럼명 보기
str(df)
txtemp <- read.table('emp.txt', header = T, sep = "")
#컬럼에 이름이 있으면 header를 T로, 데이터에 여백이 있으면 seq=""
txtemp
class(txtemp)
#op
#   사번 이름 급여
# 1  101 hong  150
# 2  201  lee  250
# 3  301  kim  300
class(txtemp)
#op
# 'data.frame':	5 obs. of  3 variables:
#   $ x: int  1 2 3 4 5
# $ y: num  2 4 6 8 10
# $ z: chr  "a" "b" "c" "d" ...
ncol(df)
# op ->[1] 3
nrow(df)
# op-> [1] 5
df[c(2:3)]
# 요약 통계량 보기
summary(df)
# 데이터프레임 자료에 함수 적용
apply(df[,c(1,2)], 2, sum)
# 데이터프레임의 부분 객체 만들기
x1 <- subset(df, x >= 3) # x가 3이상인 레코드 대상
x1
# 데이터프레임의 부분 객체 만들기
x1 <- subset(df, x >= 3) # x가 3이상인 레코드 대상
x1
y1 <- subset(df, y <= 8) # y가 8이하인 레코드 대상
y1
# 두 개의 조건으로 부분 객체 만들기
xyand <- subset(df, x>=2 & y<=6)
xyand
xyor <- subset(df, x>=2 | y<=6)
xyor
# student 데이터프레임 만들기
sid <- c('A','B','C','D')
score <- c(90, 80, 70, 60)
subject <- c('컴퓨터', '국어국문', '소프트웨어', '유아교육')
student <- data.frame(sid, score, subject)
student
# 자료형과 자료구조 보기
mode(student); class(student) # list, data.frame
str(sid); str(score); str(subject)
#op
#chr [1:4] "A" "B" "C" "D"
# num [1:4] 90 80 70 60
# chr [1:4] "컴퓨터" "국어국문" "소프트웨어" "유아교육"
str(student)
# 두 개 이상의 데이터프레임 병합하기
height <- data.frame(id=c(1,2), h=c(180, 175))
weight <- data.frame(id=c(1,2), w=c(80,75))
height; weight
person <- merge()
person <- merge(height, weight, by.x = "id",by.y = "id")
person
# galton 데이터 셋 가져오기
install.packages("UsingR") # 패키지 설치
library(UsingR) # 패키지 메모리에 로드
data("galton") # galton 데이터 셋 가져오기
# galton 데이터 셋 구조 보기
str(galton)
#op
# 'data.frame':	928 obs. of  2 variables:
#   $ child : num  61.7 61.7 61.7 61.7 61.7 62.2 62.2 62.2 62.2 62.2 ...
# $ parent: num  70.5 68.5 65.5 64.5 64 67.5 67.5 67.5 66.5 66.5 ...
dim(galton)
#op -> [1] 928   2
head(galton, 20)
head(galton) # default 갯수:6
View(galton)
head(galton) # default 갯수:6
tail(galton)
head(galton) # default 갯수:6
# 문자열 추출하기
install.packages("stringr") # 패키지 설치
# 문자열 추출하기
install.packages("stringr") # 패키지 설치
install.packages("stringr")
library(stringr) # 메모리 로딩
# 형식) str_extract('문자열', '정규표현식')
str_extract("홍길동35이순신45강감찬50","[0-9]{2}")
# op -> [1] "35"
str_extract_all("홍길동35이순신45강감찬50","[0-9]{2}")
str_extract_all(string, '[a-z]{3}') #3자 연속된 알파벳 추출
# 반복수를 지정하여 영문자 추출
string <- 'hongkildong105lee1002you25강감찬2005'
str_extract_all(string, '[a-z]{3}') #3자 연속된 알파벳 추출
#op
# [[1]]
# [1] "hon" "gki" "ldo" "lee" "you"
str_extract_all(string, '[a-z]{3,}') #3글자 이상 연속된 알파벳 추출
#op  -> [1] "hongkildong" "lee"         "you"
str_extract_all(string, '[a-z]{3,5}') #3~5글자 연속된 알파벳 추출
# 특정 단어 추출
str_extract_all(string, '유관순')
str_extract_all(string, '강감찬')
# 한글, 영문자, 숫자 추출하기
str_extract_all(string, 'hong')
str_extract_all(string, '25')
#op
# [[1]]
# [1] "hong"
str_extract_all(string, '25')
#op
# [[1]]
# [1] "25"
str_extract_all(string, '[가-힣]{3}') # 한글 검색
#op
str_extract_all(string, '[A-Z]{3}') # 대문자 검색
#op
# [[1]]
# [1] "강감찬"
str_extract_all(string, '[a-z]{3}') # 소문자 검색
#op
# [[1]]
# character(0)
str_extract_all(string, '[A-Z]{4}') # 숫자 검색
#op
# [[1]]
# character(0)
str_extract_all(string, '[0-9]{4}') # 숫자 검색
# 한글, 영문자, 숫자를 제외한 나머지 추출하기
str_extract_all(string, '[^a-z]')
#op
# [[1]]
# [1] "1"  "0"  "5"  "1"  "0"  "0"  "2"  "2"  "5"  "강" "감" "찬" "2"  "0"  "0"  "5"
str_extract_all(string, '[^a-z]{4}')
#op
# [[1]]
# [1] "1002"   "25강감" "찬200"
str_extract_all(string, '[^가-힣]{5}')
#op
# [[1]]
# [1] "hongk" "ildon" "g105l" "ee100" "2you2"
str_extract_all(string, '[^0-9]{4}')
#op
# [[1]]
# [1] "hongk" "ildon" "g105l" "ee100" "2you2"
str_extract_all(string, '[^0-9]{3}')
# 주민등록번호 검사하기
jumin <- '123456-3234567'
str_extract_all(jumin, '[0-9]{6}[1234][0-9]{6}')
str_extract_all(jumin, '[0-9]{6}-[1234][0-9]{6}')
#op
# [[1]]
# [1] "123456-3234567"
str_extract_all(jumin, '\\d{6}-[1234]\\d{6}') #\d는 숫자라는 의미, \\가 되는 이유는 \를 인식시키기 위해
# 지정된 길이의 단어 추출하기
name <- '홍길동1234,이순신5678,강감찬1012'
str_extract_all(name, '\\w{7,}')  #\w특수문자만 제외
# op
# [[1]]
# [1] "홍길동1234" "이순신5678" "강감찬1012"
str_extract_all(name, '\\W') #\W : 특수문자만 선택,
# 문자열 길이 구하기
string <- 'hongkild105lee1002you25강감찬2005'
len <- str_length(string) # 30
len
# 부분 문자열
string_sub <- str_sub(string, 1, len-7)
string_sub
# op->[1] "hongkild105lee1002you25"
string_sub <- str_sub(string, 1, 23)
string_sub
# 대문자, 소문자 변경하기
str_to_upper(string_sub)
str_to_lower(string_sub)
# 문자열 교체하기
string_rep <- str_replace(string_sub, 'hongkild105', '홍길동35,')
string_rep <- str_replace(string_rep, 'lee1002', '이순신45,')
string_rep <- str_replace(string_rep, 'you25', '유관순25,')
string_rep
# 문자열 결합하기
string_c <- str_c(string_rep, '강감찬55')
string_c
# 문자열 결합하기
string_c <- str_c(string_rep, '강감찬55')
string_c
# 문자열 분리하기
string_sp <- str_split(string_c, ',')
string_sp
# 문자열 합치기
string_vec <- c('홍길동35', '이순신45', '유관순25', '강감찬55')
string_vec
string_join <- paste(string_vec, collapse = ',')
string_join
# 키보드로 숫자 입력하기
num <- scan()
# 키보드로 숫자 입력하기
num <- scan()
# 1: 10
# 2: 20
# 3: 30
# 4:
#   Read 3 items
num
# 합계 구하기
sum(num)
# 키보드로 문자 입력하기
name <- scan(what = character())
# 1: 홍길동
# 2: 이순신
# 3: 강감친
# 4:
#   Read 3 items
name
df <- edit(df)
df
df <- edit(df)
# 편집기 이용 데이터프레임 만들기
df <- data.frame() #빈 데이터프레임 생성
df <- edit(df)
df
# 1) read.table() 함수 이용
#   - 컬럼명이 없는 파일 불러오기
getwd()
student <- read.table(file = "student.txt")
student
mode(student); class(student)
#    V1   V2  V3 V4
# 1 101 hong 175 65
# 2 201  lee 185 85
# 3 301  kim 173 60
# 4 401 park 180 70
mode(student); class(student)
names(student) <- c('번호', '이름', '키', '몸무게')
student
#   - 컬럼명이 있는 파일 불러오기
student1 <- read.table("student1.txt",header = T)
student1
#   - 탐색기를 통해서 파일 선택하기
student1 <- read.table(file.choose())
#   - 탐색기를 통해서 파일 선택하기
student1 <- read.table(file.choose(), header = T)
student1
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table("student2.txt")
student2
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table("student2.txt", header = T)
student2
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table("student2.txt", header = T, sep = ";")
student2
source("C:/workspaces/RLAB/src/Day66/chap03_DataIO.R", echo=TRUE)
#   - 결측치를 처리하여 파일 불러오기
student3 <- read.table("student3.txt", header = T, na.strings = "-")
student3
