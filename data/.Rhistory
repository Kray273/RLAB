mode(student); class(student)
#    V1   V2  V3 V4
# 1 101 hong 175 65
# 2 201  lee 185 85
# 3 301  kim 173 60
# 4 401 park 180 70
mode(student); class(student)
names(student) <- c('번호', '이름', '키', '몸무게')
student
#   - 컬럼명이 있는 파일 불러오기
student1 <- read.table("student1.txt",header = T)
student1
#   - 탐색기를 통해서 파일 선택하기
student1 <- read.table(file.choose())
#   - 탐색기를 통해서 파일 선택하기
student1 <- read.table(file.choose(), header = T)
student1
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table("student2.txt")
student2
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table("student2.txt", header = T)
student2
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table("student2.txt", header = T, sep = ";")
student2
source("C:/workspaces/RLAB/src/Day66/chap03_DataIO.R", echo=TRUE)
#   - 결측치를 처리하여 파일 불러오기
student3 <- read.table("student3.txt", header = T, na.strings = "-")
student3
# ifelse() 응용
getwd()
setwd("C:/workspaces/RLAB/data")
excel <- read.csv("excel.csv", header = T)
excel
View(excel)
q1 <- excel$q1 # q1 변수값 추출
ifelse(q1 >= 3, sqrt(q1), q1) # 3보다 큰 경우 sqrt() 함수 적용. 루트를 씌어 실수형 반환
ifelse(q1 >= 2 & q1 <= 4, q1^2, q1)
# 3) switch문
#   형식) switch(비교구문, 실행구문1, 실행구문2, 실행구문3, ...)
switch("name", id="hong", pwd="1234", age=25, name="홍길동")
empname <- scan(what = "")
q1 <- excel$q1 # q1 변수값 추출
ifelse(q1 >= 3, sqrt(q1), q1) # 3보다 큰 경우 sqrt() 함수 적용. 루트를 씌어 실수형 반환
ifelse(q1 >= 2 & q1 <= 4, q1^2, q1)
# 3) switch문
#   형식) switch(비교구문, 실행구문1, 실행구문2, 실행구문3, ...)
switch("name", id="hong", pwd="1234", age=25, name="홍길동")
empname <- scan(what = "")
empname # "kang"
switch(empname, hong=250, lee=350, kim=200, kang=400) # 400
name <- c("kim", "lee", "choi", "park")
which(name == "choi") # 3(index)
# 데이터프레임에서 사용
no <- c(1:5)
name <- c("홍길동", "이순신", "강감찬", "유관순", "김유신")
score <- c(85, 78, 89, 90, 74)
exam <- data.frame(학번=no, 이름=name, 성적=score)
exam
exam[sel,]
sel <- which(exam$이름=="유관순") # 4
exam <- data.frame(학번=no, 이름=name, 성적=score)
exam
sel <- which(exam$이름=="유관순") # 4
exam[sel,]
i <- c(1:10)
i
d <- numeric() # 빈 vector(숫자)
for(n in i){ # 10회 반복
print(n*10)
print(n)
d[n] <- n*2
}
d
for(n in i){
if(n %% 2 != 0){ #나머지값이 0이 아닌경우
print(n) # %% : 나머지 값 - 홀수만 출력.
}
}
for(n in i){
if(n %% 2 == 0){ #나머지 값이 0인 경우
next # 다음 문장 skip -> 반복문 계속(자바의 continue 키워드와 동일.)
}else{
print(n) # %% : 나머지 값 - 홀수만 출력.
}
}
# 벡터 데이터 사용 예
score <- c(85, 95, 98)
name <- c("홍길동", "이순신", "강감찬")
i <- 1 # 첨자로 사용되는 변수
for(s in score){
cat(name[i], " -> ", s, "\n")
i <- i+1
}
# 2) 반복문 - while(조건){표현식}
i = 0
while(i < 10){
i <- i + 1
print(i)
}
# 매개변수가 없는 함수 예
f1 <- function(){
cat("매개변수가 없는 함수")
}
f1() # 함수 호출 방법
# 매개변수가 있는 함수 예
f2 <- function(x){
cat("x의 값 = ", x, "\n")
print(x)
}
f2(10) # 실인수
f2(c(1:10)) # 벡터
# 리턴값이 있는 함수 예
f3 <- function(x, y){
add <- x + y # 덧셈
return (add)   # 결과 반환
}
add <- f3(10, 30)
add
# 기술 통계량을 계산하는 함수 정의
# 파일 불러오기
getwd()
test <- read.csv("test.csv", header = T)
head(test)
# A 컬럼 요약통계량, 빈도수 구하기.
summary(test) # 요약통계량.
table(test$A) # A 변수 대상 빈도 수.
max(test$A)   # 최대값
min(test$A)   # 최소값
length(test)  # 5
for(idx in 1:length(x)){
cat(idx, '번째 컬럼의 빈도분석 결과')
print(table(x[idx]))
cat('\n')
}
# 각 컬럼 단위 요약통계량과 빈도 수 구하기.
data_pro <- function(x){
for(idx in 1:length(x)){
cat(idx, '번째 컬럼의 빈도분석 결과')
print(table(x[idx]))
cat('\n')
}
for(idx in 1:length(x)){
f <- table(x[idx])
cat(idx, '번째 컬럼의 최대값/최소값 \n')
cat("max=", max(f), "min=", min(f), '\n')
}
}
data_pro(test) # 함수 호출
# 분산과 표준편차를 구하는 함수 정의
z <- c(7, 5, 12, 9, 15, 6) # x 변량 생성
var_sd <- function(x){
var <- sum((x-mean(x))^2) / (length(x)-1) # 표본분산
sd <- sqrt(var)
cat('표본분산:', var, '\n')
cat('표본 표준편차:', sd, '\n')
}
var_sd(z)
# 분산과 표준편차를 구하는 함수 정의
z <- c(7, 5, 12, 9, 15, 6) # x 변량 생성
var_sd <- function(x){
var <- sum((x-mean(x))^2) / (length(x)-1) # 표본분산
sd <- sqrt(var)
cat('표본분산:', var, '\n')
cat('표본 표준편차:', sd, '\n')
}
var_sd(z)
# 결측치(NA) 데이터 처리
data <- c(10, 20, 5, 4, 40, 7, NA, 6, 3, NA, 2, NA)
data
mean(data) # NA
mean(data, na.rm = T) # 10.77778
# 구구단 출력 함수
gugudan <- function(i, j){
for(x in i){
cat("== ", x, "단 ==\n")
for(y in j){
cat(x, "*", y, "=", x*y, "\n")
}
cat("\n")
}
}
i <- c(2:9) # 단수 지정
j <- c(1:9) # 단수와 곱해지는 수 지정
gugudan(i, j)
# 단계1 : 데이터 셋 불러오기
library(RSADBE)
data(Bug_Metrics_Software)
class(Bug_Metrics_Software)
Bug_Metrics_Software[,,1]
Bug_Metrics_Software[,,2]
# 단계2 : 소프트웨어 발표 전 행 단위 합계와 평균 구하기.
rowSums(Bug_Metrics_Software[,,1])
rowMeans(Bug_Metrics_Software[,,1])
# 단계3 : 소프트웨어 발표 전의 열 단위 합계와 평균 구하기.
colSums(Bug_Metrics_Software[,,1])
colMeans(Bug_Metrics_Software[,,1])
# 기술 통계량 관련 내장 함수 사용 예
seq(-2, 2, by = .2) # 0.2씩 증가
vec <- 1:10
vec
min(vec)
max(vec)
range(vec)
mean(vec)
median(vec)
sum(vec)
var(vec)
sd(vec) # 표준편차 구하기.
table(vec)    # 빈도수
# 난수와 확률 분포 관계
# 단계1 : 정규분포(연속형)의 난수 생성
n <- 1000
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
r
hist(r) # 대칭성
# 단계2 : 균등분포(연속형)의 난수 생성
n <- 1000
r2 <- runif(n, min = 0, max = 1) # 0 < r2 < 1
hist(r2)
r2 <- runif(n, min = 0, max = 1) # 0 < r2 < 1
hist(r2)
r2 <- runif(n, min = 0, max = 1) # 0 < r2 < 1
hist(r2)
# 단계3 : 이항분포(이산형) 난수 생성
n <- 20
rbinom(n, 1, prob = 1/2)
rbinom(n, 2, 0.5)
rbinom(n, 10, 0.5)
n <- 1000
rbinom(n, 5, prob = 1/6)
rbinom(n, 1, prob = 1/2)
# 단계3 : 이항분포(이산형) 난수 생성
n <- 20
rbinom(n, 1, prob = 1/2)
rbinom(n, 2, 0.5)
rbinom(n, 10, 0.5)
# 단계4 : 종자값(seed)으로 동일한 난수 생성.
rnorm(5, mean=0, sd=1)
set.seed(123)
rnorm(5, mean=0, sd=1)
set.seed(123)
rnorm(5, mean=0, sd=1)
set.seed(345)
rnorm(5, mean=0, sd=1)
set.seed(123)
rnorm(5, mean=0, sd=1)
set.seed(123)
rnorm(5, mean=0, sd=1)
# 수학 관련 내장함수 사용 예
vec <- 1:10
prod(vec) # 벡터 원소들의 곱
factorial(5)
abs(-5)
sqrt(16) # 루트
log(10) # 10의 자연로그(밑수가 e)
log10(10) # 10의 일반로그(밑수가 10)
# 집합연산 관련 내장 함수 사용 예
x <- c(1, 3, 5, 7, 9)
y <- c(3, 7, 8)
union(x, y) # 합집합
setequal(x, y) # 동일성 체크
intersect (x, y) # 집합x와y의교집합
intersect (x, y) # 집합x와y의교집합
setdiff(x, y)# x의모든원소중y에는없는x와y의차집합
# 막대 차트 데이터 생성
chart_data <- c(305, 450, 320, 460, 330, 480, 380, 520)
names(chart_data) <- c("2019 1분기", "2020 1분기", "2019 2분기", "2020 2분기", "2019 3분기", "2020 3분기", "2019 4분기", "2020 4분기")
str(chart_data)
chart_data
# 세로 막대 차트
help("barplot")
help(barplot)
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:10), nrow = 2, byrow = T)
ｃ　<-  length(ｍ)
　ｍ　<-  length(ｍ)
help("length")
length(chart_data)
# 세로 막대 차트　
help("barplot")
help(barplot)
barplot(chart_data, ylim = c(0, 600), col = rainbow(8), main = "2019년도 vs 2020년도 분기별 매출현황 비교")
barplot(chart_data, ylim = c(0, 600), col = rainbow(8),
xlab = "년도별 분기현황", ylab = "매출액(단위:만원)",
main = "2019년도 vs 2020년도 분기별 매출현황 비교")
#    (2) 가로 막대 차트
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
col = rainbow(8),
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T)
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
col = rainbow(8),
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5)
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
col = rainbow(8),
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5, cex.names=0.8)
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
col = rainbow(8),
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5)
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
col = rainbow(8),
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5, cex.names=0.8)
# red와 blue 색상 4회 반복
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5, cex.names=0.8,
col=rep(c(2, 4), 4))
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5, cex.names=0.8,
col=rep(c("green", "yellow"), 4))
# 누적 막대 차트
data("VADeaths")
VADeaths
str(VADeaths)
length(VADeaths)
# 누적 차트
par(mfrow=c(1,2)) # 1행 2열 그래프 보기
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율")
legend(3.8, 200,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(3.8, 200,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(3.8, 200,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율")
legend(3.8, 200,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
#  2) 점 차트 시각화 - dotchart()
help("dotchart")
par(mfrow=c(1,1)) # 1행1열 그래프 보기
dotchart(chart_data, color = c("black", "red"),
xlab = "매출액(단위:만원)",
cex=1.2,
main="분기별 판매현황 점 차트 시각화",
labels=names(chart_data))
#  2) 점 차트 시각화 - dotchart()
help("dotchart")
par(mfrow=c(1,1)) # 1행1열 그래프 보기
dotchart(chart_data, color = c("black", "red"),
xlab = "매출액(단위:만원)",
cex=1.2,
main="분기별 판매현황 점 차트 시각화",
labels=names(chart_data))
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(25, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(25, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(25, 20,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(25, 20,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(25, 20,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(25, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(25, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(5, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(10, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(15, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(20, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(20, 60,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(20, 30,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(20, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
dotchart(chart_data, color = c("black", "red"),
xlab = "매출액(단위:만원)",
cex=1.2,
main="분기별 판매현황 점 차트 시각화",
labels=names(chart_data))
dotchart(chart_data, color = c("black", "red"),
xlab = "매출액(단위:만원)",
cex=1.2,
main="분기별 판매현황 점 차트 시각화",
labels=names(chart_data),
lcolor="blue", pch=2:3)
#  3) 원형 차트 시각화 - pie() 함수
help(pie)
pie(chart_data, labels = names(chart_data),
border = 'blue', col=rainbow(8), cex=1.2)
title("2019~2020년도 분기별 매출현황")
#  1) 상자 그래프 시각화 : 요약정보를 시각화하는데 효과적. 특히 데이터의 분포 정도와 이상치 발견을 목적으로 하는 경우 유용.
help(boxplot)
par(mfrow=c(1,2))
boxplot(VADeaths) # 상자그래프 시각화.
#사진1.
boxplot(VADeaths, range=0)
abline(h = 37, lty=3, col="red") # 기준선 추가(lty=3 : 점선)
summary(VADeaths)
#  1) 상자 그래프 시각화 : 요약정보를 시각화하는데 효과적. 특히 데이터의 분포 정도와 이상치 발견을 목적으로 하는 경우 유용.
help(boxplot)
boxplot(VADeaths) # 상자그래프 시각화.
#사진1.
boxplot(VADeaths, range=0)
#사진1.
boxplot(VADeaths, range=1)
#사진1.
boxplot(VADeaths, range=2)
#사진1.
boxplot(VADeaths, range=1)
abline(h = 37, lty=3, col="red") # 기준선 추가(lty=3 : 점선)
#사진1.
boxplot(VADeaths, range=1)
data("iris") # iris 데이터 셋 가져오기
head(iris)
table(iris$Species)
names(iris)
summary(iris$Sepal.Width)
View(iris)
mode(iris)
length(iris)
str(iris)
