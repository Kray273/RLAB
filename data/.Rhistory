c(a,b)
c(a,b)
a; b
c(a,b) # 하나의 데이터로 출력력
c <- lapply(c(a,b), max) # list로 결과반환
c
mode(c); class(c)  # "list" "list"
# 리스트 형식을 벡터 형식으로 반환하기
c <- sapply(c(a,b), max)
c
# op -> [1]  5 10
mode(c); class(c) # "numeric" "integer"
# 다차원 리스트 객체 생성
multi_list <- list(list(1,2,3),list(10,20,30),list(100,200,300))
multi_list
#
# [[3]]
# [[3]][[1]]
# [1] 100
#
# [[3]][[2]]
# [1] 200
#
# [[3]][[3]]
# [1] 300
multi_list <- list(c1=list(1,2,3),c2=list(10,20,30),c3=list(100,200,300))
multi_list
multi_list$c1
multi_list$c2
multi_list$c3
# op
# [[1]]
# [1] 100
#
# [[2]]
# [1] 200
#
# [[3]]
# [1] 300
mode(multi_list); class(multi_list)
# 다차원 리스트를 열 단위로 바인딩
d <- do.call(cbind, multi_list)
d
class(d) # "matrix"
# 벡터 이용 객체 생성
no  <- c(1, 2, 3)
name <- c("홍길동","이순신","강감찬")
pay <- c(150,250,300)
vemp <- data.frame(No=no,Name=name,Pay=pay)
vemp
# op
#    No   Name Pay
# 1  1 홍길동 150
# 2  2 이순신 250
# 3  3 강감찬 300
class(vemp) # "data.frame"
# 벡터 이용 객체 생성
no  <- c(1, 2, 3)
name <- c("홍길동","이순신","강감찬")
pay <- c(150,250,300)
vemp <- data.frame(No=no,Name=name,Pay=pay)
vemp
# matrix 이용 객체 생성
args(matrix)
m <- matrix(c(1,"홍길동",150,
2,"이순신",250,
3,"강감찬",300), 3, byrow = T)
m
class(m)
memp <- data.frame(m)
memp
gc()
m <- matrix(c(1,"홍길동",150,
2,"이순신",250,
3,"강감찬",300), 3, byrow = T)
memp <- data.frame(m)
memp
#op 데이터 프레임의 형변환이 가능.
#    X1     X2  X3
# 1  1 홍길동 150
# 2  2 이순신 250
# 3  3 강감찬 300
class(memp)
# txt 파일 이용 객체 생성
getwd()
# csv 파일 이용 객체 생성(header=T)
csvtemp <- read.csv('emp.csv', header = T)
csvtemp; class(csvtemp)
# csv 파일 이용 객체 생성(header=T)
csvtemp <- read.csv('emp.csv', header = T)
csvtemp; class(csvtemp)
# csv 파일 이용 객체 생성(header=T)
csvtemp <- read.csv('emp.csv', header = T)
csvtemp; class(csvtemp)
# csv 파일 이용 객체 생성(header=F)
name <- c("사번", "이름", "급여")
csvtemp2 <- read.csv('emp2.csv',header = F, col.names = name)
csvtemp2
# 데이터프레임 만들기
df <- data.frame(x=c(1:5), y=seq(2,10,2), z=c('a','b','c','d','e'))
df
# 데이터프레임 컬럼명 참조
df$x
# 자료구조, 열수, 행수, 컬럼명 보기
str(df)
txtemp <- read.table('emp.txt', header = T, sep = "")
#컬럼에 이름이 있으면 header를 T로, 데이터에 여백이 있으면 seq=""
txtemp
class(txtemp)
#op
#   사번 이름 급여
# 1  101 hong  150
# 2  201  lee  250
# 3  301  kim  300
class(txtemp)
#op
# 'data.frame':	5 obs. of  3 variables:
#   $ x: int  1 2 3 4 5
# $ y: num  2 4 6 8 10
# $ z: chr  "a" "b" "c" "d" ...
ncol(df)
# op ->[1] 3
nrow(df)
# op-> [1] 5
df[c(2:3)]
# 요약 통계량 보기
summary(df)
# 데이터프레임 자료에 함수 적용
apply(df[,c(1,2)], 2, sum)
# 데이터프레임의 부분 객체 만들기
x1 <- subset(df, x >= 3) # x가 3이상인 레코드 대상
x1
# 데이터프레임의 부분 객체 만들기
x1 <- subset(df, x >= 3) # x가 3이상인 레코드 대상
x1
y1 <- subset(df, y <= 8) # y가 8이하인 레코드 대상
y1
# 두 개의 조건으로 부분 객체 만들기
xyand <- subset(df, x>=2 & y<=6)
xyand
xyor <- subset(df, x>=2 | y<=6)
xyor
# student 데이터프레임 만들기
sid <- c('A','B','C','D')
score <- c(90, 80, 70, 60)
subject <- c('컴퓨터', '국어국문', '소프트웨어', '유아교육')
student <- data.frame(sid, score, subject)
student
# 자료형과 자료구조 보기
mode(student); class(student) # list, data.frame
str(sid); str(score); str(subject)
#op
#chr [1:4] "A" "B" "C" "D"
# num [1:4] 90 80 70 60
# chr [1:4] "컴퓨터" "국어국문" "소프트웨어" "유아교육"
str(student)
# 두 개 이상의 데이터프레임 병합하기
height <- data.frame(id=c(1,2), h=c(180, 175))
weight <- data.frame(id=c(1,2), w=c(80,75))
height; weight
person <- merge()
person <- merge(height, weight, by.x = "id",by.y = "id")
person
# galton 데이터 셋 가져오기
install.packages("UsingR") # 패키지 설치
library(UsingR) # 패키지 메모리에 로드
data("galton") # galton 데이터 셋 가져오기
# galton 데이터 셋 구조 보기
str(galton)
#op
# 'data.frame':	928 obs. of  2 variables:
#   $ child : num  61.7 61.7 61.7 61.7 61.7 62.2 62.2 62.2 62.2 62.2 ...
# $ parent: num  70.5 68.5 65.5 64.5 64 67.5 67.5 67.5 66.5 66.5 ...
dim(galton)
#op -> [1] 928   2
head(galton, 20)
head(galton) # default 갯수:6
View(galton)
head(galton) # default 갯수:6
tail(galton)
head(galton) # default 갯수:6
# 문자열 추출하기
install.packages("stringr") # 패키지 설치
# 문자열 추출하기
install.packages("stringr") # 패키지 설치
install.packages("stringr")
library(stringr) # 메모리 로딩
# 형식) str_extract('문자열', '정규표현식')
str_extract("홍길동35이순신45강감찬50","[0-9]{2}")
# op -> [1] "35"
str_extract_all("홍길동35이순신45강감찬50","[0-9]{2}")
str_extract_all(string, '[a-z]{3}') #3자 연속된 알파벳 추출
# 반복수를 지정하여 영문자 추출
string <- 'hongkildong105lee1002you25강감찬2005'
str_extract_all(string, '[a-z]{3}') #3자 연속된 알파벳 추출
#op
# [[1]]
# [1] "hon" "gki" "ldo" "lee" "you"
str_extract_all(string, '[a-z]{3,}') #3글자 이상 연속된 알파벳 추출
#op  -> [1] "hongkildong" "lee"         "you"
str_extract_all(string, '[a-z]{3,5}') #3~5글자 연속된 알파벳 추출
# 특정 단어 추출
str_extract_all(string, '유관순')
str_extract_all(string, '강감찬')
# 한글, 영문자, 숫자 추출하기
str_extract_all(string, 'hong')
str_extract_all(string, '25')
#op
# [[1]]
# [1] "hong"
str_extract_all(string, '25')
#op
# [[1]]
# [1] "25"
str_extract_all(string, '[가-힣]{3}') # 한글 검색
#op
str_extract_all(string, '[A-Z]{3}') # 대문자 검색
#op
# [[1]]
# [1] "강감찬"
str_extract_all(string, '[a-z]{3}') # 소문자 검색
#op
# [[1]]
# character(0)
str_extract_all(string, '[A-Z]{4}') # 숫자 검색
#op
# [[1]]
# character(0)
str_extract_all(string, '[0-9]{4}') # 숫자 검색
# 한글, 영문자, 숫자를 제외한 나머지 추출하기
str_extract_all(string, '[^a-z]')
#op
# [[1]]
# [1] "1"  "0"  "5"  "1"  "0"  "0"  "2"  "2"  "5"  "강" "감" "찬" "2"  "0"  "0"  "5"
str_extract_all(string, '[^a-z]{4}')
#op
# [[1]]
# [1] "1002"   "25강감" "찬200"
str_extract_all(string, '[^가-힣]{5}')
#op
# [[1]]
# [1] "hongk" "ildon" "g105l" "ee100" "2you2"
str_extract_all(string, '[^0-9]{4}')
#op
# [[1]]
# [1] "hongk" "ildon" "g105l" "ee100" "2you2"
str_extract_all(string, '[^0-9]{3}')
# 주민등록번호 검사하기
jumin <- '123456-3234567'
str_extract_all(jumin, '[0-9]{6}[1234][0-9]{6}')
str_extract_all(jumin, '[0-9]{6}-[1234][0-9]{6}')
#op
# [[1]]
# [1] "123456-3234567"
str_extract_all(jumin, '\\d{6}-[1234]\\d{6}') #\d는 숫자라는 의미, \\가 되는 이유는 \를 인식시키기 위해
# 지정된 길이의 단어 추출하기
name <- '홍길동1234,이순신5678,강감찬1012'
str_extract_all(name, '\\w{7,}')  #\w특수문자만 제외
# op
# [[1]]
# [1] "홍길동1234" "이순신5678" "강감찬1012"
str_extract_all(name, '\\W') #\W : 특수문자만 선택,
# 문자열 길이 구하기
string <- 'hongkild105lee1002you25강감찬2005'
len <- str_length(string) # 30
len
# 부분 문자열
string_sub <- str_sub(string, 1, len-7)
string_sub
# op->[1] "hongkild105lee1002you25"
string_sub <- str_sub(string, 1, 23)
string_sub
# 대문자, 소문자 변경하기
str_to_upper(string_sub)
str_to_lower(string_sub)
# 문자열 교체하기
string_rep <- str_replace(string_sub, 'hongkild105', '홍길동35,')
string_rep <- str_replace(string_rep, 'lee1002', '이순신45,')
string_rep <- str_replace(string_rep, 'you25', '유관순25,')
string_rep
# 문자열 결합하기
string_c <- str_c(string_rep, '강감찬55')
string_c
# 문자열 결합하기
string_c <- str_c(string_rep, '강감찬55')
string_c
# 문자열 분리하기
string_sp <- str_split(string_c, ',')
string_sp
# 문자열 합치기
string_vec <- c('홍길동35', '이순신45', '유관순25', '강감찬55')
string_vec
string_join <- paste(string_vec, collapse = ',')
string_join
# 키보드로 숫자 입력하기
num <- scan()
# 키보드로 숫자 입력하기
num <- scan()
# 1: 10
# 2: 20
# 3: 30
# 4:
#   Read 3 items
num
# 합계 구하기
sum(num)
# 키보드로 문자 입력하기
name <- scan(what = character())
# 1: 홍길동
# 2: 이순신
# 3: 강감친
# 4:
#   Read 3 items
name
df <- edit(df)
df
df <- edit(df)
# 편집기 이용 데이터프레임 만들기
df <- data.frame() #빈 데이터프레임 생성
df <- edit(df)
df
# 1) read.table() 함수 이용
#   - 컬럼명이 없는 파일 불러오기
getwd()
student <- read.table(file = "student.txt")
student
mode(student); class(student)
#    V1   V2  V3 V4
# 1 101 hong 175 65
# 2 201  lee 185 85
# 3 301  kim 173 60
# 4 401 park 180 70
mode(student); class(student)
names(student) <- c('번호', '이름', '키', '몸무게')
student
#   - 컬럼명이 있는 파일 불러오기
student1 <- read.table("student1.txt",header = T)
student1
#   - 탐색기를 통해서 파일 선택하기
student1 <- read.table(file.choose())
#   - 탐색기를 통해서 파일 선택하기
student1 <- read.table(file.choose(), header = T)
student1
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table("student2.txt")
student2
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table("student2.txt", header = T)
student2
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table("student2.txt", header = T, sep = ";")
student2
source("C:/workspaces/RLAB/src/Day66/chap03_DataIO.R", echo=TRUE)
#   - 결측치를 처리하여 파일 불러오기
student3 <- read.table("student3.txt", header = T, na.strings = "-")
student3
# ifelse() 응용
getwd()
setwd("C:/workspaces/RLAB/data")
excel <- read.csv("excel.csv", header = T)
excel
View(excel)
q1 <- excel$q1 # q1 변수값 추출
ifelse(q1 >= 3, sqrt(q1), q1) # 3보다 큰 경우 sqrt() 함수 적용. 루트를 씌어 실수형 반환
ifelse(q1 >= 2 & q1 <= 4, q1^2, q1)
# 3) switch문
#   형식) switch(비교구문, 실행구문1, 실행구문2, 실행구문3, ...)
switch("name", id="hong", pwd="1234", age=25, name="홍길동")
empname <- scan(what = "")
q1 <- excel$q1 # q1 변수값 추출
ifelse(q1 >= 3, sqrt(q1), q1) # 3보다 큰 경우 sqrt() 함수 적용. 루트를 씌어 실수형 반환
ifelse(q1 >= 2 & q1 <= 4, q1^2, q1)
# 3) switch문
#   형식) switch(비교구문, 실행구문1, 실행구문2, 실행구문3, ...)
switch("name", id="hong", pwd="1234", age=25, name="홍길동")
empname <- scan(what = "")
empname # "kang"
switch(empname, hong=250, lee=350, kim=200, kang=400) # 400
name <- c("kim", "lee", "choi", "park")
which(name == "choi") # 3(index)
# 데이터프레임에서 사용
no <- c(1:5)
name <- c("홍길동", "이순신", "강감찬", "유관순", "김유신")
score <- c(85, 78, 89, 90, 74)
exam <- data.frame(학번=no, 이름=name, 성적=score)
exam
exam[sel,]
sel <- which(exam$이름=="유관순") # 4
exam <- data.frame(학번=no, 이름=name, 성적=score)
exam
sel <- which(exam$이름=="유관순") # 4
exam[sel,]
i <- c(1:10)
i
d <- numeric() # 빈 vector(숫자)
for(n in i){ # 10회 반복
print(n*10)
print(n)
d[n] <- n*2
}
d
for(n in i){
if(n %% 2 != 0){ #나머지값이 0이 아닌경우
print(n) # %% : 나머지 값 - 홀수만 출력.
}
}
for(n in i){
if(n %% 2 == 0){ #나머지 값이 0인 경우
next # 다음 문장 skip -> 반복문 계속(자바의 continue 키워드와 동일.)
}else{
print(n) # %% : 나머지 값 - 홀수만 출력.
}
}
# 벡터 데이터 사용 예
score <- c(85, 95, 98)
name <- c("홍길동", "이순신", "강감찬")
i <- 1 # 첨자로 사용되는 변수
for(s in score){
cat(name[i], " -> ", s, "\n")
i <- i+1
}
# 2) 반복문 - while(조건){표현식}
i = 0
while(i < 10){
i <- i + 1
print(i)
}
# 매개변수가 없는 함수 예
f1 <- function(){
cat("매개변수가 없는 함수")
}
f1() # 함수 호출 방법
# 매개변수가 있는 함수 예
f2 <- function(x){
cat("x의 값 = ", x, "\n")
print(x)
}
f2(10) # 실인수
f2(c(1:10)) # 벡터
# 리턴값이 있는 함수 예
f3 <- function(x, y){
add <- x + y # 덧셈
return (add)   # 결과 반환
}
add <- f3(10, 30)
add
# 기술 통계량을 계산하는 함수 정의
# 파일 불러오기
getwd()
test <- read.csv("test.csv", header = T)
head(test)
# A 컬럼 요약통계량, 빈도수 구하기.
summary(test) # 요약통계량.
table(test$A) # A 변수 대상 빈도 수.
max(test$A)   # 최대값
min(test$A)   # 최소값
length(test)  # 5
for(idx in 1:length(x)){
cat(idx, '번째 컬럼의 빈도분석 결과')
print(table(x[idx]))
cat('\n')
}
# 각 컬럼 단위 요약통계량과 빈도 수 구하기.
data_pro <- function(x){
for(idx in 1:length(x)){
cat(idx, '번째 컬럼의 빈도분석 결과')
print(table(x[idx]))
cat('\n')
}
for(idx in 1:length(x)){
f <- table(x[idx])
cat(idx, '번째 컬럼의 최대값/최소값 \n')
cat("max=", max(f), "min=", min(f), '\n')
}
}
data_pro(test) # 함수 호출
# 분산과 표준편차를 구하는 함수 정의
z <- c(7, 5, 12, 9, 15, 6) # x 변량 생성
var_sd <- function(x){
var <- sum((x-mean(x))^2) / (length(x)-1) # 표본분산
sd <- sqrt(var)
cat('표본분산:', var, '\n')
cat('표본 표준편차:', sd, '\n')
}
var_sd(z)
# 분산과 표준편차를 구하는 함수 정의
z <- c(7, 5, 12, 9, 15, 6) # x 변량 생성
var_sd <- function(x){
var <- sum((x-mean(x))^2) / (length(x)-1) # 표본분산
sd <- sqrt(var)
cat('표본분산:', var, '\n')
cat('표본 표준편차:', sd, '\n')
}
var_sd(z)
# 결측치(NA) 데이터 처리
data <- c(10, 20, 5, 4, 40, 7, NA, 6, 3, NA, 2, NA)
data
mean(data) # NA
mean(data, na.rm = T) # 10.77778
# 구구단 출력 함수
gugudan <- function(i, j){
for(x in i){
cat("== ", x, "단 ==\n")
for(y in j){
cat(x, "*", y, "=", x*y, "\n")
}
cat("\n")
}
}
i <- c(2:9) # 단수 지정
j <- c(1:9) # 단수와 곱해지는 수 지정
gugudan(i, j)
