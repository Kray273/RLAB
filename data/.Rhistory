# A 컬럼 요약통계량, 빈도수 구하기.
summary(test) # 요약통계량.
table(test$A) # A 변수 대상 빈도 수.
max(test$A)   # 최대값
min(test$A)   # 최소값
length(test)  # 5
for(idx in 1:length(x)){
cat(idx, '번째 컬럼의 빈도분석 결과')
print(table(x[idx]))
cat('\n')
}
# 각 컬럼 단위 요약통계량과 빈도 수 구하기.
data_pro <- function(x){
for(idx in 1:length(x)){
cat(idx, '번째 컬럼의 빈도분석 결과')
print(table(x[idx]))
cat('\n')
}
for(idx in 1:length(x)){
f <- table(x[idx])
cat(idx, '번째 컬럼의 최대값/최소값 \n')
cat("max=", max(f), "min=", min(f), '\n')
}
}
data_pro(test) # 함수 호출
# 분산과 표준편차를 구하는 함수 정의
z <- c(7, 5, 12, 9, 15, 6) # x 변량 생성
var_sd <- function(x){
var <- sum((x-mean(x))^2) / (length(x)-1) # 표본분산
sd <- sqrt(var)
cat('표본분산:', var, '\n')
cat('표본 표준편차:', sd, '\n')
}
var_sd(z)
# 분산과 표준편차를 구하는 함수 정의
z <- c(7, 5, 12, 9, 15, 6) # x 변량 생성
var_sd <- function(x){
var <- sum((x-mean(x))^2) / (length(x)-1) # 표본분산
sd <- sqrt(var)
cat('표본분산:', var, '\n')
cat('표본 표준편차:', sd, '\n')
}
var_sd(z)
# 결측치(NA) 데이터 처리
data <- c(10, 20, 5, 4, 40, 7, NA, 6, 3, NA, 2, NA)
data
mean(data) # NA
mean(data, na.rm = T) # 10.77778
# 구구단 출력 함수
gugudan <- function(i, j){
for(x in i){
cat("== ", x, "단 ==\n")
for(y in j){
cat(x, "*", y, "=", x*y, "\n")
}
cat("\n")
}
}
i <- c(2:9) # 단수 지정
j <- c(1:9) # 단수와 곱해지는 수 지정
gugudan(i, j)
# 단계1 : 데이터 셋 불러오기
library(RSADBE)
data(Bug_Metrics_Software)
class(Bug_Metrics_Software)
Bug_Metrics_Software[,,1]
Bug_Metrics_Software[,,2]
# 단계2 : 소프트웨어 발표 전 행 단위 합계와 평균 구하기.
rowSums(Bug_Metrics_Software[,,1])
rowMeans(Bug_Metrics_Software[,,1])
# 단계3 : 소프트웨어 발표 전의 열 단위 합계와 평균 구하기.
colSums(Bug_Metrics_Software[,,1])
colMeans(Bug_Metrics_Software[,,1])
# 기술 통계량 관련 내장 함수 사용 예
seq(-2, 2, by = .2) # 0.2씩 증가
vec <- 1:10
vec
min(vec)
max(vec)
range(vec)
mean(vec)
median(vec)
sum(vec)
var(vec)
sd(vec) # 표준편차 구하기.
table(vec)    # 빈도수
# 난수와 확률 분포 관계
# 단계1 : 정규분포(연속형)의 난수 생성
n <- 1000
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r
hist(r) # 대칭성
r <- rnorm(n, mean = 0, sd = 1)
r
hist(r) # 대칭성
# 단계2 : 균등분포(연속형)의 난수 생성
n <- 1000
r2 <- runif(n, min = 0, max = 1) # 0 < r2 < 1
hist(r2)
r2 <- runif(n, min = 0, max = 1) # 0 < r2 < 1
hist(r2)
r2 <- runif(n, min = 0, max = 1) # 0 < r2 < 1
hist(r2)
# 단계3 : 이항분포(이산형) 난수 생성
n <- 20
rbinom(n, 1, prob = 1/2)
rbinom(n, 2, 0.5)
rbinom(n, 10, 0.5)
n <- 1000
rbinom(n, 5, prob = 1/6)
rbinom(n, 1, prob = 1/2)
# 단계3 : 이항분포(이산형) 난수 생성
n <- 20
rbinom(n, 1, prob = 1/2)
rbinom(n, 2, 0.5)
rbinom(n, 10, 0.5)
# 단계4 : 종자값(seed)으로 동일한 난수 생성.
rnorm(5, mean=0, sd=1)
set.seed(123)
rnorm(5, mean=0, sd=1)
set.seed(123)
rnorm(5, mean=0, sd=1)
set.seed(345)
rnorm(5, mean=0, sd=1)
set.seed(123)
rnorm(5, mean=0, sd=1)
set.seed(123)
rnorm(5, mean=0, sd=1)
# 수학 관련 내장함수 사용 예
vec <- 1:10
prod(vec) # 벡터 원소들의 곱
factorial(5)
abs(-5)
sqrt(16) # 루트
log(10) # 10의 자연로그(밑수가 e)
log10(10) # 10의 일반로그(밑수가 10)
# 집합연산 관련 내장 함수 사용 예
x <- c(1, 3, 5, 7, 9)
y <- c(3, 7, 8)
union(x, y) # 합집합
setequal(x, y) # 동일성 체크
intersect (x, y) # 집합x와y의교집합
intersect (x, y) # 집합x와y의교집합
setdiff(x, y)# x의모든원소중y에는없는x와y의차집합
# 막대 차트 데이터 생성
chart_data <- c(305, 450, 320, 460, 330, 480, 380, 520)
names(chart_data) <- c("2019 1분기", "2020 1분기", "2019 2분기", "2020 2분기", "2019 3분기", "2020 3분기", "2019 4분기", "2020 4분기")
str(chart_data)
chart_data
# 세로 막대 차트
help("barplot")
help(barplot)
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:10), nrow = 2, byrow = T)
ｃ　<-  length(ｍ)
　ｍ　<-  length(ｍ)
help("length")
length(chart_data)
# 세로 막대 차트　
help("barplot")
help(barplot)
barplot(chart_data, ylim = c(0, 600), col = rainbow(8), main = "2019년도 vs 2020년도 분기별 매출현황 비교")
barplot(chart_data, ylim = c(0, 600), col = rainbow(8),
xlab = "년도별 분기현황", ylab = "매출액(단위:만원)",
main = "2019년도 vs 2020년도 분기별 매출현황 비교")
#    (2) 가로 막대 차트
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
col = rainbow(8),
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T)
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
col = rainbow(8),
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5)
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
col = rainbow(8),
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5, cex.names=0.8)
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
col = rainbow(8),
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5)
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
col = rainbow(8),
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5, cex.names=0.8)
# red와 blue 색상 4회 반복
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5, cex.names=0.8,
col=rep(c(2, 4), 4))
barplot(chart_data, xlim = c(0, 600),
ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
main = "2019년도 vs 2020년도 분기별 매출현황 비교",
horiz = T, space=1.5, cex.names=0.8,
col=rep(c("green", "yellow"), 4))
# 누적 막대 차트
data("VADeaths")
VADeaths
str(VADeaths)
length(VADeaths)
# 누적 차트
par(mfrow=c(1,2)) # 1행 2열 그래프 보기
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율")
legend(3.8, 200,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(3.8, 200,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(3.8, 200,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율")
legend(3.8, 200,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
#  2) 점 차트 시각화 - dotchart()
help("dotchart")
par(mfrow=c(1,1)) # 1행1열 그래프 보기
dotchart(chart_data, color = c("black", "red"),
xlab = "매출액(단위:만원)",
cex=1.2,
main="분기별 판매현황 점 차트 시각화",
labels=names(chart_data))
#  2) 점 차트 시각화 - dotchart()
help("dotchart")
par(mfrow=c(1,1)) # 1행1열 그래프 보기
dotchart(chart_data, color = c("black", "red"),
xlab = "매출액(단위:만원)",
cex=1.2,
main="분기별 판매현황 점 차트 시각화",
labels=names(chart_data))
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(19, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(25, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(25, 71,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(25, 20,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(25, 20,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(25, 20,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(25, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 개별 차트
barplot(VADeaths, col=rainbow(5),
main = "미국 버지니아주 하위계층 사망 비율",
beside=T)
legend(25, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(5, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(10, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(15, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(20, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(20, 60,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(20, 30,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
legend(20, 70,
c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
dotchart(chart_data, color = c("black", "red"),
xlab = "매출액(단위:만원)",
cex=1.2,
main="분기별 판매현황 점 차트 시각화",
labels=names(chart_data))
dotchart(chart_data, color = c("black", "red"),
xlab = "매출액(단위:만원)",
cex=1.2,
main="분기별 판매현황 점 차트 시각화",
labels=names(chart_data),
lcolor="blue", pch=2:3)
#  3) 원형 차트 시각화 - pie() 함수
help(pie)
pie(chart_data, labels = names(chart_data),
border = 'blue', col=rainbow(8), cex=1.2)
title("2019~2020년도 분기별 매출현황")
#  1) 상자 그래프 시각화 : 요약정보를 시각화하는데 효과적. 특히 데이터의 분포 정도와 이상치 발견을 목적으로 하는 경우 유용.
help(boxplot)
par(mfrow=c(1,2))
boxplot(VADeaths) # 상자그래프 시각화.
#사진1.
boxplot(VADeaths, range=0)
abline(h = 37, lty=3, col="red") # 기준선 추가(lty=3 : 점선)
summary(VADeaths)
#  1) 상자 그래프 시각화 : 요약정보를 시각화하는데 효과적. 특히 데이터의 분포 정도와 이상치 발견을 목적으로 하는 경우 유용.
help(boxplot)
boxplot(VADeaths) # 상자그래프 시각화.
#사진1.
boxplot(VADeaths, range=0)
#사진1.
boxplot(VADeaths, range=1)
#사진1.
boxplot(VADeaths, range=2)
#사진1.
boxplot(VADeaths, range=1)
abline(h = 37, lty=3, col="red") # 기준선 추가(lty=3 : 점선)
#사진1.
boxplot(VADeaths, range=1)
data("iris") # iris 데이터 셋 가져오기
head(iris)
table(iris$Species)
names(iris)
summary(iris$Sepal.Width)
View(iris)
mode(iris)
length(iris)
str(iris)
#  3) 원형 차트 시각화 - pie() 함수
help(pie)
pie(chart_data, labels = names(chart_data),
border = 'blue', col=rainbow(8), cex=1.2)
#사진13.
title("2019~2020년도 분기별 매출현황")
#  1) 상자 그래프 시각화 : 요약정보를 시각화하는데 효과적. 특히 데이터의 분포 정도와 이상치 발견을 목적으로 하는 경우 유용.
help(boxplot)
par(mfrow=c(1,2))
boxplot(VADeaths) # 상자그래프 시각화.
#사진1.
boxplot(VADeaths, range=1)
abline(h = 37, lty=3, col="red") # 기준선 추가(lty=3 : 점선)
summary(VADeaths)
data("iris") # iris 데이터 셋 가져오기
head(iris)
View(iris)
mode(iris)
str(iris)
length(iris)
table(iris$Species)
names(iris)
summary(iris$Sepal.Width)
hist(iris$Sepal.Width, xlab = "꽃받침의 너비",
col="green", xlim=c(2.0, 4.5),
main="iris 꽃받침 너비 histogram")
summary(iris$Sepal.Length)
hist(iris$Sepal.Length, xlab = "꽃받침의 길이",
col="mistyrose", xlim=c(4.0, 8.0),
main="iris 꽃받침 너비 histogram")
hist(iris$Sepal.Length, xlab = "꽃받침의 길이",
col="mistyrose", xlim=c(4.0, 8.0),
main="iris 꽃받침 길이이 histogram")
hist(iris$Sepal.Length, xlab = "꽃받침의 길이",
col="mistyrose", xlim=c(4.0, 8.0),
main="iris 꽃받침 길이 histogram")
data("iris") # iris 데이터 셋 가져오기
head(iris)
View(iris)
mode(iris)
str(iris)
length(iris)
table(iris$Species)
names(iris)
summary(iris$Sepal.Width)
hist(iris$Sepal.Width, xlab = "꽃받침의 너비",
col="green", xlim=c(2.0, 4.5),
main="iris 꽃받침 너비 histogram")
summary(iris$Sepal.Length)
hist(iris$Sepal.Length, xlab = "꽃받침의 길이",
col="mistyrose", xlim=c(4.0, 8.0),
main="iris 꽃받침 길이 histogram")
hist(iris$Sepal.Length, xlab = "꽃받침의 길이",
col="mistyrose", xlim=c(4.0, 8.0),
main="iris 꽃받침 길이 histogram")
hist(iris$Sepal.Width, xlab = "꽃받침의 너비",
col="green", xlim=c(2.0, 4.5),
main="iris 꽃받침 너비 histogram")
hist(iris$Sepal.Length, xlab = "꽃받침의 길이",
col="mistyrose", xlim=c(4.0, 8.0),
main="iris 꽃받침 길이 histogram")
hist(iris$Sepal.Length, xlab = "꽃받침의 길이",
col="mistyrose", xlim=c(4.0, 8.0),
main="iris 꽃받침 길이 histogram")
# 확률 밀도로 히스토그램 그리기 - 연속형변수의 확률.
hist(iris$Sepal.Width, xlab = "꽃받침 너비",
col="mistyrose", xlim=c(2.0, 4.5),
main="iris 꽃받침 너비 histgram", freq=F)
# 밀도를 기준으로 line을 그려준다.
lines(density(iris$Sepal.Width), col="red")
# 확률 밀도로 히스토그램 그리기 - 연속형변수의 확률.
hist(iris$Sepal.Width, xlab = "꽃받침 너비",
col="mistyrose", xlim=c(2.0, 4.5),
main="iris 꽃받침 너비 histgram", freq=F)
# 밀도를 기준으로 line을 그려준다.
lines(density(iris$Sepal.Width), col="red")
# 정규분포곡선 추가
# - 분포곡선:빈도수의 값을 선으로 연결하여 얻어진 곡선.
x <- seq(2.0, 4.5, 0.1)
x
curve(dnorm(x, mean=mean(iris$Sepal.Width), sd=sd(iris$Sepal.Width)),
col="blue", add=T)
# 기본 산점도 시각화
price <- runif(10, min = 1, max = 100) # 1~100 사이의 10개 난수 발생.
plot(price)
# 대각선 추가
par(new=T) # 차트 추가
price
plot(price)
# 대각선 추가
par(new=T) # 차트 추가
line_chart <- c(1:100)
line_chart
plot(line_chart, type = "l", col="red", axes = F, ann = F)
# 텍스트 추가
text(70, 80, "대각선 추가", col="blue")
# type 속성으로 그리기
par(mfrow=c(2,2)) # 2행 2열 차트 그리기
plot(price, type = "l") # 유형:실선
plot(price, type = "o") # 유형:원형과 실선(원형통과)
plot(price, type = "h") # 유형:직선
plot(price, type = "s") # 유형:꺽은선
# pch 속성으로 그리기
plot(price, type="o", pch=5) # 빈 사각형
plot(price, type="o", pch=15) # 채워진 사각형
plot(price, type="o", pch=20) # 채워진 원형
plot(price, type="o", pch=20, col="blue")
plot(price, type="o", pch=20, col="orange", cex=3.0)
plot(price, type="o", pch=20, col="orange", cex=3.0, lwd=3) # lwd:line width
# pch 속성으로 그리기
plot(price, type="o", pch=5) # 빈 사각형
plot(price, type="o", pch=15) # 채워진 사각형
plot(price, type="o", pch=20) # 채워진 원형
plot(price, type="o", pch=20, col="blue")
# pch 속성으로 그리기
plot(price, type="o", pch=5) # 빈 사각형
plot(price, type="o", pch=15) # 채워진 사각형
# pch 속성으로 그리기
plot(price, type="o", pch=5) # 빈 사각형
plot(price, type="o", pch=15) # 채워진 사각형
plot(price, type="o", pch=20) # 채워진 원형
plot(price, type="o", pch=20, col="blue")
#사진 12.
plot(price, type="o", pch=20, col="orange", cex=3.0)
plot(price, type="o", pch=20, col="orange", cex=3.0, lwd=3) # lwd:line width
