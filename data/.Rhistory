# [실습] 변수 간의 상관관계 분석과 요인분석
cor(subject)
# [실습] 변수 간의 상관관계 분석과 요인분석
cor(subject)
result <- factanal(subject, factors = 2, rotation = "varimax")
result # p-value is 0.0232  < 0.05 # 요인수가 부족.
result # p-value is 0.0232  < 0.05 # 요인수가 부족.
# (2) 고유값으로 가정한 3개 요인으로 분석
result <- factanal(subject, factors = 3, rotation = "varimax")
result
result <- factanal(subject, factors = 3, # 요인 개수 지정
rotation = "varimax", # 회전방법 지정("varimax", "promax", "none")
scores="regression") # 요인점수 계산 방법
result
# (2) 고유값으로 가정한 3개 요인으로 분석
result <- factanal(subject, factors = 4, rotation = "varimax")
result
# (2) 고유값으로 가정한 3개 요인으로 분석
result <- factanal(subject, factors = 4, rotation = "varimax")
# 요인적재량 보기
names(result)
result$loadings
# (2) 고유값으로 가정한 3개 요인으로 분석
result <- factanal(subject, factors = 4, rotation = "varimax")
# 요인적재량 보기
names(result)
result$loadings
result
result <- factanal(subject, factors = 3, # 요인 개수 지정
rotation = "varimax", # 회전방법 지정("varimax", "promax", "none")
scores="regression") # 요인점수 계산 방법
result
# (3) 다양한 방법으로 요인적재량 보기
print(result, digits = 2, cutoff=0.5)
print(result$loadings, cutoff=0) # display every loadings
result$scores
# (1) Factor1, Factor2 요인지표 시각화
plot(result$scores[, c(1:2)], main="Factor1과 Factor2 요인점수 행렬")
#사진3.
text(result$scores[, 1], result$scores[,2],
labels = name, cex = 0.7, pos = 3, col = "blue")
# 요인적재량 plotting
points(result$loadings[, c(1:2)], pch=19, col = "red")
#사진5.
text(result$loadings[, 1], result$loadings[,2],
labels = rownames(result$loadings),
cex = 0.8, pos = 3, col = "red")
# (2) Factor1, Factor3 요인지표 시각화
plot(result$scores[,c(1,3)], main="Factor1과 Factor3 요인점수 행렬")
#사진7.
text(result$scores[,1], result$scores[,3],
labels = name, cex = 0.7, pos = 3, col = "blue")
# 요인적재량 plotting
points(result$loadings[,c(1,3)], pch=19, col = "red")
text(result$loadings[,1], result$loadings[,3],
labels = rownames(result$loadings),
cex = 0.8, pos = 3, col = "red")
# [실습] 3차원 산점도로 요인적재량 시각화
install.packages("scatterplot3d")
library(scatterplot3d)
Factor1 <- result$scores[,1]
Factor2 <- result$scores[,2]
Factor3 <- result$scores[,3]
# scatterplot3d(밑변, 오른쪽변, 왼쪽변, type='p') # type='p' : 기본산점도 표시
d3 <- scatterplot3d(Factor1, Factor2, Factor3)
# 요인적재량 표시
loadings1 <- result$loadings[,1]
loadings2 <- result$loadings[,2]
loadings3 <- result$loadings[,3]
d3$points3d(loadings1, loadings2, loadings3, bg='red',pch=21, cex=2, type='h')
# [실습] 요인별 변수 묶기
# (1) 요인별 과목변수 이용 데이터프레임 생성
app <- data.frame(subject$s5, subject$s6) # 응용과학
soc <- data.frame(subject$s3, subject$s4) # 사회과학
net <- data.frame(subject$s1, subject$s2) # 자연과학
# (2) 산술평균 계산 - 3개의 파생변수 생성:가독성과 설득력이 높다.
app_science <- round( (app$subject.s5 + app$subject.s6) / ncol(app), 2)
soc_science <- round( (soc$subject.s3 + soc$subject.s4) / ncol(soc), 2)
net_science <- round( (net$subject.s1 + net$subject.s2) / ncol(net), 2)
# (3) 상관관계 분석 - 요인분석을 통해서 만들어진 파생변수는 상관분석이나 회귀분석에서 독립변수로 사용할 수 있다.
subject_factor_df <- data.frame(app_science, soc_science, net_science)
cor(subject_factor_df)
# (3) 상관관계 분석 - 요인분석을 통해서 만들어진 파생변수는 상관분석이나 회귀분석에서 독립변수로 사용할 수 있다.
subject_factor_df <- data.frame(app_science, soc_science, net_science)
cor(subject_factor_df)
# (1) 데이터 가져오기
install.packages('memisc') # spss tool 포맷 파일 읽어오기
library(memisc)
library(memisc)
#setwd("C:/workspaces/RLAB/data/")
data.spss <- as.data.set(spss.system.file('C:/workspaces/Rwork/src/data/drinking_water.sav', , encoded = 'utf-8'))
#setwd("C:/workspaces/RLAB/data/")
data.spss <- as.data.set(spss.system.file('C:/workspaces/RLAB/data/drinking_water.sav', , encoded = 'utf-8'))
data.spss
View(data.spss)
#setwd("C:/workspaces/RLAB/data/")
data.spss <- as.data.set(spss.system.file('C:/workspaces/RLAB/data/drinking_water.sav', encoded = 'utf-8'))
View(data.spss)
# (2) 데이터프레임으로 변경
drinking_water <- data.spss[1:11]
drinking_water
drinking_water_df <- as.data.frame(drinking_water)
str(drinking_water_df)
View(drinking_water_df)
# (3)  요인수를 3개로 지정하여 요인분석 수행
result2 <- factanal(drinking_water_df, factors = 3, rotation = "varimax",
scores = "regression")
result2
# (3)  요인수를 3개로 지정하여 요인분석 수행
result2 <- factanal(drinking_water_df, factors = 3, rotation = "varimax",
scores = "regression")
result2
# (3)  요인수를 3개로 지정하여 요인분석 수행
result2 <- factanal(drinking_water_df, factors = 4, rotation = "varimax",
scores = "regression")
result2
# (3)  요인수를 3개로 지정하여 요인분석 수행
result2 <- factanal(drinking_water_df, factors = 5, rotation = "varimax",
scores = "regression")
result2
# (3)  요인수를 3개로 지정하여 요인분석 수행
result2 <- factanal(drinking_water_df, factors = 6, rotation = "varimax",
scores = "regression")
result2
# (3)  요인수를 3개로 지정하여 요인분석 수행
result2 <- factanal(drinking_water_df, factors = 8, rotation = "varimax",
scores = "regression")
# (3)  요인수를 3개로 지정하여 요인분석 수행
result2 <- factanal(drinking_water_df, factors = 7, rotation = "varimax",
scores = "regression")
# (3)  요인수를 3개로 지정하여 요인분석 수행
result2 <- factanal(drinking_water_df, factors = 6, rotation = "varimax",
scores = "regression")
result2
# (3)  요인수를 3개로 지정하여 요인분석 수행
result2 <- factanal(drinking_water_df, factors = 3, rotation = "varimax",
scores = "regression")
result2
# 1)  q4 칼럼 제외하여 데이터프레임 생성
dw_df <- drinking_water_df[-4]
str(dw_df)
dim(dw_df) # [1] 380  10
cor(dw_df)
class(dw_df)
names(dw_df) <- c('q1','q2','q3','q5','q6','q7','q8','q9','q10','q11')
# 제품만족도 저장 데이터프레임
s <- data.frame(dw_df$q8, dw_df$q9, dw_df$q10, dw_df$q11)
# 제품친밀도 저장 데이터프레임
c <- data.frame(dw_df$q1, dw_df$q2, dw_df$q3)
# 제품적절성 저장 데이터프레임
p <- data.frame(dw_df$q5, dw_df$q6, dw_df$q7)
# 제품적절성 저장 데이터프레임
p <- data.frame(dw_df$q5, dw_df$q6, dw_df$q7)
# 3) 요인별 산술평균 계산
satisfaction <- round( (s$dw_df.q8 + s$dw_df.q9 + s$dw_df.q10 + s$dw_df.q11) / ncol(s), 2)
closeness <- round( (c$dw_df.q1 + c$dw_df.q2 + c$dw_df.q3) / ncol(c), 2)
pertinence <- round( (p$dw_df.q5 + p$dw_df.q6 + p$dw_df.q7) / ncol(p), 2)
# 4) 상관관계 분석
drinking_water_factor_df <- data.frame(satisfaction, closeness, pertinence)
colnames(drinking_water_factor_df) <- c("제품만족도","제품친밀도","제품적절성")
cor(drinking_water_factor_df)
cor(drinking_water_factor_df)
# [실습] 기술 통계량 구하기
result <- read.csv("C:/workspaces/RLAB/data/product.csv", header=TRUE)
# [실습] 기술 통계량 구하기
result <- read.csv("C:/workspaces/RLAB/data/product.csv", header=TRUE)
# [실습] 기술 통계량 구하기
result <- read.csv("C:/workspaces/RLAB/data/product.csv", header=TRUE)
View(result)
head(result) # 친밀도 적절성 만족도(등간척도 - 5점 척도)
# 기술통계량
summary(result) # 요약통계량
sd(result$제품_친밀도); sd(result$제품_적절성); sd(result$제품_만족도)
sd(result$제품_친밀도); sd(result$제품_적절성); sd(result$제품_만족도) #표준편차의 값 확인
# [실습] 상관계수(coefficient of correlation) : 두 변량 X,Y 사이의 상관관계 정도를 나타내는 수치(계수)
cor(result$제품_친밀도, result$제품_적절성) # 0.4992086 -> 다소 높은 양의 상관관계
cor(result$제품_친밀도, result$제품_만족도) # 0.467145 -> 다소 높은 양의 상관관계
# [실습] 전체 변수 간 상관계수 보기
cor(result, method="pearson")
# [실습] 방향성 있는 색상으로 표현
install.packages("corrgram")
library(corrgram)
corrgram(result) # 색상 적용 - 동일 색상으로 그룹화 표시
#사진1.
corrgram(result, upper.panel=panel.conf) # 수치(상관계수) 추가(위쪽)
cor(result)
#사진2.
corrgram(result, lower.panel=panel.conf) # 수치(상관계수) 추가(아래쪽)
# [실습] 차트에 밀도 곡선, 상관성, 유의확률(별표) 추가
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
library(PerformanceAnalytics)
# 상관성,p값(*),정규분포 시각화 - 모수 검정 조건
chart.Correlation(result, histogram=, pch="+")
# [실습]  spearman : 서열척도 대상 상관계수
cor(result, method="spearman")
# 단계1: 데이터 셋 가져오기
data("AirPassengers") # 12년(1949~1961년)간 매월 항공기 탑승 승객 수를 기록한 시계열 자료.
str(AirPassengers) # Time-Series [1:144] from 1949 to 1961:
ts.plot(AirPassengers)
par(mfrow=c(1,2))
log <- diff(AirPassengers) # 차분 수행
plot(log) # 평균 정상화
log <- diff(log(AirPassengers)) # 로그+차분 수행
plot(log) # 분산 정상화
ts.plot(AirPassengers)
ts.plot(AirPassengers)
ts.plot(AirPassengers)
# 단계2:차분(Differencing) 적용-현재 시점에서 이전 시점의 자료를 빼는 연산으로 평균을 정상화하는데 이용 : 평균 정상화.
x11()
ts.plot(AirPassengers)
log <- diff(AirPassengers) # 차분 수행
# 단계1: WWWusage 데이터 셋 가져오기 - R에서 기본 제공 데이터 셋으로 인터넷 사용 시간을 분 단위로 측정한 100개 vector로 구성된 시계열 자료.
data("WWWusage")
str(WWWusage) # Time-Series [1:100] from 1 to 100:
WWWusage
ts.plot(WWWusage, type="l", col="red")
# 단계1 : 데이터 셋 가져오기
data("EuStockMarkets") # 유럽(1991~1998년)의 주요 주식의 주가지수 일일 마감 가격.
head(EuStockMarkets) # DAX(독일) SMI(스위스) CAC(프랑스) FTSE(영국)
str(EuStockMarkets) # Time-Series [1:1860, 1:4]
# 단계2 : 데이터프레임으로 변환
EuStock <- data.frame(EuStockMarkets)
EuStock
head(EuStock)
plot(EuStock$DAX[1:1000], type = "l", col="red") # 선 그래프 시각화
plot(EuStock$DAX[1:1000], type = "l", col="red") # 선 그래프 시각화
# 단계4 : 다중 시계열 데이터 추세선
plot.ts(cbind(EuStock$DAX[1:1000], EuStock$SMI[1:1000]), main="주가지수 추세선")
data <- c(45,56,45,43,69,75,58,59,66,64,62,65,
55,49,67,55,71,78,71,65,69,43,70,75,
56,56,65,55,82,85,75,77,77,69,79,89)
length(data) # 36
# 단계2 : 시계열자료 생성 : 시계열 자료 형식으로 객체 생성
tsdata <- ts(data, start = c(2016, 1), frequency = 12)
tsdata # 2016~2018
# 단계3 : 추세선 확인
par(mfrow=c(1,1))
ts.plot(tsdata) # plot(tsdata)와 동일함.
ts.plot(tsdata) # plot(tsdata)와 동일함.
# 단계3 : 추세선 확인
par(mfrow=c(1,1)) #화면에 하나의 그래프
ts.plot(tsdata) # plot(tsdata)와 동일함.
# 단계4 : 시계열 분해- stl():계절요소, 추세, 잔차 모두 제공.
plot(stl(tsdata, "periodic")) # periodic : 주기
# 단계5 : 시계열 분해와 변동 요인 제거
m <- decompose(tsdata) # decompose()함수 이용 시계열 분해
attributes(m) # 변수 보기
plot(m) # 추세요인, 계절요인, 불규칙 요인이 포함된 그래프.
#사진3.
plot(tsdata - m$seasonal) # 계절요인을 제거한 그래프.
plot(tsdata - m$trend) # 추세요인 제거 그래프
#사진5.
plot(tsdata - m$seasonal - m$trend) # 불규칙 요인만 출력.
tsdata # 2016~2018
ts.plot(tsdata) # plot(tsdata)와 동일함.
# 단계4 : 시계열 분해- stl():계절요소, 추세, 잔차 모두 제공.
plot(stl(tsdata, "periodic")) # periodic : 주기
# 단계5 : 시계열 분해와 변동 요인 제거
m <- decompose(tsdata) # decompose()함수 이용 시계열 분해
attributes(m) # 변수 보기
plot(m) # 추세요인, 계절요인, 불규칙 요인이 포함된 그래프.
#사진3.
plot(tsdata - m$seasonal) # 계절요인을 제거한 그래프.
plot(tsdata - m$trend) # 추세요인 제거 그래프
#사진5.
plot(tsdata - m$seasonal - m$trend) # 불규칙 요인만 출력.
# 단계1 : 시계열자료 생성
input <- c(3180,3000,3200,3100,3300,3200,3400,3550,3200,3400,3300,3700)
length(input) # 12
tsdata <- ts(input, start = c(2015, 2), frequency = 12) # Time Series
tsdata
acf(na.omit(tsdata), main="자기상관함수", col="red")
# 단계3 : 부분자기상관함수 시각화
pacf(na.omit(tsdata), main="부분자기상관함수", col="red")
# Time Series
tsdata <- ts(input, start = c(2015, 2), frequency = 12)
# 단계2 : 추세선 시각
plot(tsdata, type="l", col="red")
# 단계3 : 자기상관 함수 시각화
acf(na.omit(tsdata), main="자기상관함수", col="red")
# 단계4 : 차분 시각화
plot(diff(tsdata, differences=1))
# 단계1: 시계열  자료 생성
data <- c(45,56,45,43,69,75,58,59,66,64,62,65,
55,49,67,55,71,78,71,65,69,43,70,75,
56,56,65,55,82,85,75,77,77,69,79,89)
length(data) # 36
tsdata <- ts(data, start = c(2016, 1), frequency = 12)
tsdata
# 단계2 : 평활 관련 패키지 설치
install.packages("TTR")
library(TTR)
# 단계3 : 이동평균법으로 평활 및 시각화
par(mfrow=c(2,2))
plot(tsdata, main="원 시계열 자료") # 시계열 자료 시각화
# 단계3 : 이동평균법으로 평활 및 시각화
par(mfrow=c(1,1))
plot(tsdata, main="원 시계열 자료") # 시계열 자료 시각화
plot(tsdata, main="원 시계열 자료") # 시계열 자료 시각화
#사진1.
plot(SMA(tsdata, n=1), main="1년 단위 이동평균법으로 평활")
#사진2.
plot(SMA(tsdata, n=2), main="2년 단위 이동평균법으로 평활")
#사진3.
plot(SMA(tsdata, n=3), main="3년 단위 이동평균법으로 평활")
par(mfrow=c(1,1))
data <- c(45,56,45,43,69,75,58,59,66,64,62,65,
55,49,67,55,71,78,71,65,69,43,70,75,
56,56,65,55,82,85,75,77,77,69,79,89)
length(data) # 36
length(data) # 36
# 단계2 : 시계열자료 생성 : 시계열 자료 형식으로 객체 생성
tsdata <- ts(data, start = c(2016, 1), frequency = 12)
tsdata # 2016~2018
# 단계1 : 시계열자료 생성
input <- c(3180,3000,3200,3100,3300,3200,3400,3550,3200,3400,3300,3700)
length(input) # 12
tsdata <- ts(input, start = c(2015, 2), frequency = 12) # Time Series
tsdata
acf(na.omit(tsdata), main="자기상관함수", col="red")
# 단계2 : 추세선 시각
plot(tsdata, type="l", col="red")
# 단계3 : 자기상관 함수 시각화
acf(na.omit(tsdata), main="자기상관함수", col="red")
# 단계4 : 차분 시각화
plot(diff(tsdata, differences=1))
#사진3.
x11()_
#사진3.
x11()
# 단계1: 시계열  자료 생성
data <- c(45,56,45,43,69,75,58,59,66,64,62,65,
55,49,67,55,71,78,71,65,69,43,70,75,
56,56,65,55,82,85,75,77,77,69,79,89)
length(data) # 36
tsdata <- ts(data, start = c(2016, 1), frequency = 12)
tsdata
# 단계2 : 평활 관련 패키지 설치
install.packages("TTR")
install.packages("TTR")
library(TTR)
# 단계3 : 이동평균법으로 평활 및 시각화
par(mfrow=c(2,2))
plot(tsdata, main="원 시계열 자료") # 시계열 자료 시각화
#사진1.
plot(SMA(tsdata, n=1), main="1년 단위 이동평균법으로 평활")
#사진2.
plot(SMA(tsdata, n=2), main="2년 단위 이동평균법으로 평활")
#사진3.
plot(SMA(tsdata, n=3), main="3년 단위 이동평균법으로 평활")
par(mfrow=c(1,1))
# 단계1: 시계열자료 특성분석
# (1) 데이터 준비
input <- c(3180,3000,3200,3100,3300,3200,3400,3550,3200,3400,3300,3700)
# (2) 시계열 객체 생성(12개월:2015년 2월 ~ 2016년 1월)
tsdata <- ts(input, start = c(2015, 2), frequency = 12)
tsdata
plot(tsdata, type="l", col='red')
ts.plot(tsdata)
#사진2.
diff <- diff(tsdata)
plot(diff)
# 단계3: 모형 식별과 추정
install.packages('forecast')
library(forecast)
arima <- auto.arima(tsdata) # 시계열 데이터 이용.
arima
# 단계4: 모형 생성
model <- arima(tsdata, order=c(1,1,0))
model
# 단계5: 모형 진단(모형 타당성 검정)
# (1) 자기상관함수에 의한 모형 진단
tsdiag(model)
# (2) Box-Ljung에 의한 잔차항 모형 진단
Box.test(model$residuals, lag = 1, type = "Ljung")
# 단계6 : 미래 예측(업무 적용)
fore <- forecast(model) # 향후 2년 예측
fore
par(mfrow=c(1,2))
plot(fore) # 향후 24개월 예측치 시각화
par(mfrow=c(1,1))
plot(fore) # 향후 24개월 예측치 시각화
model2 <- forecast(model, h = 6) # 향후 6개월 예측치 시각화
plot(model2)
# (1) 데이터 준비
data <- c(55,56,45,43,69,75,58,59,66,64,62,65,
55,49,67,55,71,78,61,65,69,53,70,75,
56,56,65,55,68,80,65,67,77,69,79,82,
57,55,63,60,68,70,58,65,70,55,65,70)
length(data)# 48
# (2) 시계열자료 생성
tsdata <- ts(data, start=c(2016, 1),frequency=12)
#tsdata <- AirPassengers # 실제 data 적용.
tsdata
head(tsdata)
tail(tsdata)
# (3) 시계열요소분해 시각화
ts_feature <- stl(tsdata, s.window="periodic")
plot(ts_feature)
# 단계2 : 정상성시계열 변환
par(mfrow=c(1,2))
# 단계2 : 정상성시계열 변환
par(mfrow=c(1,1))
ts.plot(tsdata)
#사진2.
diff <- diff(tsdata)
#사진3.
plot(diff) # 차분 시각화
# 단계3 : 모형 식별과 추정
library(forecast)
ts_model2 <- auto.arima(tsdata)
ts_model2 # ARIMA(0,1,1)(1,1,0)[12] / ARIMA(2,1,1)(0,1,0)[12]
# 단계4 : 모형 생성
model <- arima(tsdata, c(0,1,1), seasonal = list(order = c(1,1,0)))
#model <- arima(tsdata, c(2,1,1), seasonal = list(order = c(0,1,0)))
model
# 단계5 : 모형 진단(모형 타당성 검정)
# (1) 자기상관함수에 의한 모형 진단
tsdiag(model)
# (2)Box-Ljung에 의한 잔차항 모형 진단
Box.test(model$residuals, lag=1, type = "Ljung") # p-value = 0.5618 / p-value = 0.9879
# 단계6 : 미래 예측
par(mfrow=c(1,2))
# 단계6 : 미래 예측
par(mfrow=c(1,1))
fore <- forecast(model, h=24) # 2년 예측
plot(fore)
fore2 <- forecast(model, h=6) # 6개월 예측
plot(fore2)
#사진1.
plot(SMA(tsdata, n=1), main="1년 단위 이동평균법으로 평활")
# 단계3 : 이동평균법으로 평활 및 시각화
par(mfrow=c(2,2))
plot(tsdata, main="원 시계열 자료") # 시계열 자료 시각화
#사진1.
plot(SMA(tsdata, n=1), main="1년 단위 이동평균법으로 평활")
#사진2.
plot(SMA(tsdata, n=2), main="2년 단위 이동평균법으로 평활")
#사진3.
plot(SMA(tsdata, n=3), main="3년 단위 이동평균법으로 평활")
par(mfrow=c(1,1))
# 단계2:정상성시계열 변환
par(mfrow=c(1,2))
ts.plot(tsdata)
#사진2.
diff <- diff(tsdata)
plot(diff)
# 단계3: 모형 식별과 추정
install.packages('forecast')
install.packages("forecast")
arima <- auto.arima(tsdata) # 시계열 데이터 이용.
arima
arima <- auto.arima(tsdata) # 시계열 데이터 이용.
arima
# 단계1: 시계열자료 특성분석
# (1) 데이터 준비
input <- c(3180,3000,3200,3100,3300,3200,3400,3550,3200,3400,3300,3700)
# (2) 시계열 객체 생성(12개월:2015년 2월 ~ 2016년 1월)
tsdata <- ts(input, start = c(2015, 2), frequency = 12)
# (2) 시계열 객체 생성(12개월:2015년 2월 ~ 2016년 1월)
tsdata <- ts(input, start = c(2015, 2), frequency = 12)
tsdata
plot(tsdata, type="l", col='red')
#사진2.
diff <- diff(tsdata)
plot(diff)
# 단계2:정상성시계열 변환
par(mfrow=c(1,2))
ts.plot(tsdata)
#사진2.
diff <- diff(tsdata)
plot(diff)
arima <- auto.arima(tsdata) # 시계열 데이터 이용.
arima
# 단계4: 모형 생성
model <- arima(tsdata, order=c(1,1,0))
model
# 단계5: 모형 진단(모형 타당성 검정)
# (1) 자기상관함수에 의한 모형 진단
tsdiag(model)
# (2) Box-Ljung에 의한 잔차항 모형 진단
Box.test(model$residuals, lag = 1, type = "Ljung")
# 단계6 : 미래 예측(업무 적용)
fore <- forecast(model) # 향후 2년 예측
fore
par(mfrow=c(1,2))
plot(fore) # 향후 24개월 예측치 시각화
model2 <- forecast(model, h = 6) # 향후 6개월 예측치 시각화
plot(model2)
# (1) 데이터 준비
data <- c(55,56,45,43,69,75,58,59,66,64,62,65,
55,49,67,55,71,78,61,65,69,53,70,75,
56,56,65,55,68,80,65,67,77,69,79,82,
57,55,63,60,68,70,58,65,70,55,65,70)
length(data)# 48
# (2) 시계열자료 생성
tsdata <- ts(data, start=c(2016, 1),frequency=12)
#tsdata <- AirPassengers # 실제 data 적용.
tsdata
head(tsdata)
tail(tsdata)
# (3) 시계열요소분해 시각화
ts_feature <- stl(tsdata, s.window="periodic")
plot(ts_feature)
ts.plot(tsdata)
#사진2.
diff <- diff(tsdata)
plot(diff) # 차분 시각화
# (1) 패키지 설치 및 준비
getwd()
setwd("C:/workspaces/RLAB/data")
